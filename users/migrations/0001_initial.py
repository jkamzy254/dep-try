# Generated by Django 4.0.2 on 2022-02-11 11:43

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Memberuserdata',
            fields=[
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('password', models.CharField(db_column='Password', max_length=255)),
                ('last_login', models.DateTimeField(blank=True, db_column='Last_Login', null=True)),
                ('username', models.CharField(blank=True, db_column='Username', max_length=255, null=True, unique=True)),
                ('is_superuser', models.BooleanField(blank=True, db_column='Is_Superuser', null=True)),
                ('first_name', models.CharField(blank=True, db_column='First_Name', max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, db_column='Last_Name', max_length=255, null=True)),
                ('is_staff', models.BooleanField(blank=True, db_column='Is_Staff', null=True)),
                ('is_active', models.BooleanField(blank=True, db_column='Is_Active', null=True)),
                ('is_authenticated', models.BooleanField(blank=True, db_column='Is_Authenticated', null=True)),
                ('date_joined', models.DateTimeField(blank=True, db_column='Date_Joined', null=True)),
                ('is_anonymous', models.BooleanField(blank=True, db_column='Is_Anonymous', null=True)),
            ],
            options={
                'db_table': 'MemberUserData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Announcementdata',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('timestamp', models.TextField(blank=True, db_column='Timestamp', null=True)),
                ('title', models.TextField(blank=True, db_column='Title', null=True)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('image_link', models.TextField(blank=True, db_column='Image_Link', null=True)),
                ('createdby', models.TextField(blank=True, db_column='CreatedBy', null=True)),
                ('target', models.TextField(blank=True, db_column='Target', null=True)),
                ('priority', models.TextField(blank=True, db_column='Priority', null=True)),
            ],
            options={
                'db_table': 'AnnouncementData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Attendancedata',
            fields=[
                ('attendanceid', models.AutoField(db_column='AttendanceID', primary_key=True, serialize=False)),
                ('memberid', models.IntegerField(db_column='MemberID')),
                ('expected', models.TextField(blank=True, db_column='Expected', null=True)),
                ('expectedreason', models.TextField(blank=True, db_column='ExpectedReason', null=True)),
                ('attended', models.TextField(blank=True, db_column='Attended', null=True)),
                ('attendedreason', models.TextField(blank=True, db_column='AttendedReason', null=True)),
                ('tardy', models.BooleanField(blank=True, db_column='Tardy', null=True)),
                ('tardyreason', models.TextField(blank=True, db_column='TardyReason', null=True)),
                ('notes', models.BooleanField(blank=True, db_column='Notes', null=True)),
                ('serviceid', models.IntegerField(blank=True, db_column='ServiceID', null=True)),
                ('attendedtime', models.DateTimeField(blank=True, db_column='AttendedTime', null=True)),
                ('expectedtime', models.DateTimeField(blank=True, db_column='ExpectedTime', null=True)),
            ],
            options={
                'db_table': 'AttendanceData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Bbdata',
            fields=[
                ('bbid', models.AutoField(db_column='BBID', primary_key=True, serialize=False)),
                ('fruitkey', models.IntegerField(blank=True, db_column='FruitKey', null=True)),
                ('status', models.CharField(db_column='Status', max_length=50)),
                ('created', models.DateTimeField(blank=True, db_column='Created', null=True)),
                ('lastupdate', models.DateTimeField(blank=True, db_column='LastUpdate', null=True)),
                ('fruitname', models.CharField(db_column='FruitName', max_length=50)),
                ('l1_id', models.IntegerField(db_column='L1_ID')),
                ('l2_id', models.IntegerField(blank=True, db_column='L2_ID', null=True)),
                ('bbt_id', models.IntegerField(blank=True, db_column='BBT_ID', null=True)),
                ('city', models.CharField(blank=True, db_column='City', max_length=50, null=True)),
                ('completed', models.BooleanField(blank=True, db_column='Completed', null=True)),
                ('due_date', models.DateTimeField(blank=True, db_column='Due_Date', null=True)),
                ('last_topic', models.TextField(blank=True, db_column='Last_Topic', null=True)),
                ('stat_abbr', models.CharField(blank=True, db_column='Stat_Abbr', max_length=50, null=True)),
                ('label', models.CharField(blank=True, db_column='Label', max_length=50, null=True)),
                ('l2points', models.FloatField(blank=True, db_column='L2Points', null=True)),
                ('l1points', models.FloatField(blank=True, db_column='L1Points', null=True)),
            ],
            options={
                'db_table': 'BBData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dailystats',
            fields=[
                ('statid', models.AutoField(db_column='StatID', primary_key=True, serialize=False)),
                ('membergroup', models.CharField(db_column='MemberGroup', max_length=255)),
                ('f', models.FloatField(blank=True, db_column='F', null=True)),
                ('m', models.FloatField(blank=True, db_column='M', null=True)),
                ('pp', models.FloatField(blank=True, db_column='PP', null=True)),
                ('p', models.FloatField(blank=True, db_column='P', null=True)),
                ('region', models.CharField(blank=True, db_column='Region', max_length=255, null=True)),
                ('department', models.CharField(blank=True, db_column='Department', max_length=255, null=True)),
                ('inner_department', models.CharField(blank=True, db_column='Inner_Department', max_length=255, null=True)),
                ('day', models.DateTimeField(blank=True, db_column='Day', null=True)),
                ('gyjn', models.TextField(blank=True, db_column='GYJN', null=True)),
                ('weekno', models.IntegerField(blank=True, db_column='WeekNo', null=True)),
            ],
            options={
                'db_table': 'DailyStats',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Deptdata',
            fields=[
                ('did', models.AutoField(db_column='DID', primary_key=True, serialize=False)),
                ('department', models.CharField(db_column='Department', max_length=255)),
                ('regionpos', models.IntegerField(blank=True, db_column='RegionPos', null=True)),
                ('position', models.IntegerField(blank=True, db_column='Position', null=True)),
            ],
            options={
                'db_table': 'DeptData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Evactivity',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('activityname', models.CharField(blank=True, db_column='ActivityName', max_length=255, null=True)),
                ('activityweek', models.IntegerField(blank=True, db_column='ActivityWeek', null=True)),
                ('startdate', models.DateTimeField(blank=True, db_column='StartDate', null=True)),
                ('enddate', models.DateTimeField(blank=True, db_column='EndDate', null=True)),
                ('weekgoal', models.FloatField(blank=True, db_column='WeekGoal', null=True)),
            ],
            options={
                'db_table': 'EVActivity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Evgames',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('membergroup', models.CharField(db_column='MemberGroup', max_length=255)),
                ('gyjn', models.CharField(blank=True, db_column='GYJN', max_length=255, null=True)),
                ('picking', models.FloatField(blank=True, db_column='Picking', null=True)),
                ('pre_picking', models.FloatField(blank=True, db_column='Pre-Picking', null=True)),
                ('resultweek', models.IntegerField(blank=True, db_column='ResultWeek', null=True)),
            ],
            options={
                'db_table': 'EVGames',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Evseason',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('seasonname', models.CharField(db_column='SeasonName', max_length=255)),
                ('startdate', models.DateTimeField(blank=True, db_column='StartDate', null=True)),
                ('enddate', models.DateTimeField(blank=True, db_column='EndDate', null=True)),
                ('region', models.TextField(blank=True, db_column='Region', null=True)),
            ],
            options={
                'db_table': 'EVSeason',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Fallendata',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('fruitkey', models.IntegerField(blank=True, db_column='FruitKey', null=True)),
                ('bbtid', models.IntegerField(blank=True, db_column='BBTID', null=True)),
                ('allreasons', models.TextField(blank=True, db_column='AllReasons', null=True)),
                ('sfaenvmain', models.TextField(blank=True, db_column='sFaEnvMain', null=True)),
                ('mainreasondetails', models.TextField(blank=True, db_column='MainReasonDetails', null=True)),
                ('schedulereasons', models.TextField(blank=True, db_column='ScheduleReasons', null=True)),
                ('schedulemain', models.TextField(blank=True, db_column='ScheduleMain', null=True)),
                ('environmentreasons', models.TextField(blank=True, db_column='EnvironmentReasons', null=True)),
                ('environmentmain', models.TextField(blank=True, db_column='EnvironmentMain', null=True)),
                ('interestreasons', models.TextField(blank=True, db_column='InterestReasons', null=True)),
                ('disagreereasons', models.TextField(blank=True, db_column='DisagreeReasons', null=True)),
                ('mentalcondition', models.TextField(blank=True, db_column='MentalCondition', null=True)),
                ('migrationtype', models.TextField(blank=True, db_column='MigrationType', null=True)),
                ('migrationreason', models.TextField(blank=True, db_column='MigrationReason', null=True)),
                ('wrongintention', models.TextField(blank=True, db_column='WrongIntention', null=True)),
                ('financialreasons', models.TextField(blank=True, db_column='FinancialReasons', null=True)),
                ('visaduration', models.TextField(blank=True, db_column='VisaDuration', null=True)),
                ('understanding', models.TextField(blank=True, db_column='Understanding', null=True)),
                ('sexialityorientation', models.TextField(blank=True, db_column='SexialityOrientation', null=True)),
                ('unknowndata', models.TextField(blank=True, db_column='UnknownData', null=True)),
                ('fallenreportdate', models.TextField(blank=True, db_column='FallenReportDate', null=True)),
            ],
            options={
                'db_table': 'FallenData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Fbasicdata',
            fields=[
                ('fruitkey', models.IntegerField(db_column='FruitKey', primary_key=True, serialize=False)),
                ('fishname', models.TextField(db_column='FishName')),
                ('fishphone', models.IntegerField(blank=True, db_column='FishPhone', null=True)),
                ('fishuser', models.TextField(blank=True, db_column='FishUser', null=True)),
                ('evplatform', models.TextField(blank=True, db_column='EVPlatform', null=True)),
                ('lastupdate', models.DateTimeField(blank=True, db_column='LastUpdate', null=True)),
                ('fruitstatus', models.TextField(blank=True, db_column='FruitStatus', null=True)),
                ('currleaf1', models.IntegerField(blank=True, db_column='CurrLeaf1', null=True)),
                ('currleaf2', models.IntegerField(blank=True, db_column='CurrLeaf2', null=True)),
                ('bbt', models.IntegerField(blank=True, db_column='BBT', null=True)),
                ('points1', models.FloatField(blank=True, db_column='Points1', null=True)),
                ('points2', models.FloatField(blank=True, db_column='Points2', null=True)),
            ],
            options={
                'db_table': 'FBasicData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Fruitdata',
            fields=[
                ('fruitkey', models.IntegerField(db_column='FruitKey', primary_key=True, serialize=False)),
                ('timestamp', models.TextField(blank=True, db_column='Timestamp', null=True)),
                ('f1_id', models.TextField(blank=True, db_column='F1_ID', null=True)),
                ('fishname', models.TextField(blank=True, db_column='FishName', null=True)),
                ('fishuser', models.TextField(blank=True, db_column='FishUser', null=True)),
                ('fishphone', models.TextField(blank=True, db_column='FishPhone', null=True)),
                ('church', models.TextField(blank=True, db_column='Church', null=True)),
                ('fishing_zone', models.TextField(blank=True, db_column='Fishing_Zone', null=True)),
                ('visa', models.TextField(blank=True, db_column='Visa', null=True)),
                ('ev_concept', models.TextField(blank=True, db_column='EV_Concept', null=True)),
                ('evplatform', models.TextField(blank=True, db_column='EVPlatform', null=True)),
                ('evonlineoffline', models.TextField(blank=True, db_column='EVOnlineOffline', null=True)),
                ('birthday', models.TextField(blank=True, db_column='Birthday', null=True)),
                ('state', models.TextField(blank=True, db_column='State', null=True)),
                ('city', models.TextField(blank=True, db_column='City', null=True)),
                ('l1_id', models.TextField(blank=True, db_column='L1_ID', null=True)),
                ('l2_id', models.TextField(blank=True, db_column='L2_ID', null=True)),
                ('environment', models.TextField(blank=True, db_column='Environment', null=True)),
                ('notes', models.TextField(blank=True, db_column='Notes', null=True)),
                ('stage_f', models.TextField(blank=True, db_column='Stage_F', null=True)),
                ('stage_m', models.TextField(blank=True, db_column='Stage_M', null=True)),
                ('stage_p', models.TextField(blank=True, db_column='Stage_P', null=True)),
                ('bbt_id', models.TextField(blank=True, db_column='BBT_ID', null=True)),
                ('f2_id', models.TextField(blank=True, db_column='F2_ID', null=True)),
                ('attendee_1_id', models.TextField(blank=True, db_column='Attendee_1_ID', null=True)),
                ('attendee_2_id', models.TextField(blank=True, db_column='Attendee_2_ID', null=True)),
                ('pls', models.TextField(blank=True, db_column='PLS', null=True)),
                ('clad', models.TextField(blank=True, db_column='CLAD', null=True)),
                ('stage_pp', models.TextField(blank=True, db_column='Stage_PP', null=True)),
                ('stage', models.TextField(blank=True, db_column='Stage', null=True)),
                ('a1_points', models.FloatField(blank=True, db_column='A1_Points', null=True)),
                ('a2_points', models.FloatField(blank=True, db_column='A2_Points', null=True)),
                ('l1_points', models.FloatField(blank=True, db_column='L1_Points', null=True)),
                ('l2_points', models.FloatField(blank=True, db_column='L2_Points', null=True)),
                ('f1_points', models.FloatField(blank=True, db_column='F1_Points', null=True)),
                ('f2_points', models.FloatField(blank=True, db_column='F2_Points', null=True)),
                ('lastupdate', models.TextField(blank=True, db_column='LastUpdate', null=True)),
                ('pp1_points', models.FloatField(blank=True, db_column='PP1_Points', null=True)),
                ('pp2_points', models.FloatField(blank=True, db_column='PP2_Points', null=True)),
                ('fruitstatus', models.TextField(blank=True, db_column='FruitStatus', null=True)),
                ('pp1_id', models.TextField(blank=True, db_column='PP1_ID', null=True)),
                ('pp2_id', models.TextField(blank=True, db_column='PP2_ID', null=True)),
                ('f_time', models.DateTimeField(blank=True, db_column='F_TIME', null=True)),
                ('m_time', models.DateTimeField(blank=True, db_column='M_TIME', null=True)),
                ('p_time', models.DateTimeField(blank=True, db_column='P_TIME', null=True)),
                ('pp_time', models.DateTimeField(blank=True, db_column='PP_TIME', null=True)),
                ('holidayplan', models.TextField(blank=True, db_column='HolidayPlan', null=True)),
                ('denomination', models.TextField(blank=True, db_column='Denomination', null=True)),
                ('nationality', models.TextField(blank=True, db_column='Nationality', null=True)),
                ('residence', models.TextField(blank=True, db_column='Residence', null=True)),
                ('visanotes', models.TextField(blank=True, db_column='VisaNotes', null=True)),
                ('holidaynotes', models.TextField(blank=True, db_column='HolidayNotes', null=True)),
                ('locked', models.TextField(blank=True, db_column='Locked', null=True)),
                ('proceedable', models.TextField(blank=True, db_column='Proceedable', null=True)),
                ('gender', models.TextField(blank=True, db_column='Gender', null=True)),
                ('unlockdate', models.TextField(blank=True, db_column='UnlockDate', null=True)),
                ('unlockable', models.TextField(blank=True, db_column='Unlockable', null=True)),
                ('mine', models.TextField(blank=True, db_column='Mine', null=True)),
                ('region', models.TextField(blank=True, db_column='Region', null=True)),
                ('fishphone2', models.BigIntegerField(blank=True, db_column='FishPhone2', null=True)),
            ],
            options={
                'db_table': 'FruitData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Groupdata',
            fields=[
                ('gid', models.AutoField(db_column='GID', primary_key=True, serialize=False)),
                ('membergroup', models.CharField(db_column='MemberGroup', max_length=255)),
                ('innerdeptpos', models.IntegerField(blank=True, db_column='InnerDeptPos', null=True)),
                ('position', models.IntegerField(blank=True, db_column='Position', null=True)),
            ],
            options={
                'db_table': 'GroupData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Innerdeptdata',
            fields=[
                ('inid', models.AutoField(db_column='InID', primary_key=True, serialize=False)),
                ('innerdepartment', models.CharField(db_column='InnerDepartment', max_length=255)),
                ('deptpos', models.IntegerField(blank=True, db_column='DeptPos', null=True)),
                ('position', models.IntegerField(blank=True, db_column='Position', null=True)),
            ],
            options={
                'db_table': 'InnerDeptData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Meetingdata',
            fields=[
                ('meetingkey', models.AutoField(db_column='MeetingKey', primary_key=True, serialize=False)),
                ('fruitkey', models.FloatField(blank=True, db_column='FruitKey', null=True)),
                ('meetingnotes', models.TextField(blank=True, db_column='MeetingNotes', null=True)),
                ('attendee_1', models.FloatField(blank=True, db_column='Attendee_1', null=True)),
                ('attendee_2', models.FloatField(blank=True, db_column='Attendee_2', null=True)),
                ('createdby', models.FloatField(blank=True, db_column='CreatedBy', null=True)),
                ('modifiedby', models.FloatField(blank=True, db_column='ModifiedBy', null=True)),
                ('modifieddate', models.TextField(blank=True, db_column='ModifiedDate', null=True)),
                ('createddate', models.TextField(blank=True, db_column='CreatedDate', null=True)),
                ('meetingdate', models.TextField(blank=True, db_column='MeetingDate', null=True)),
                ('nextmeetingdate', models.TextField(blank=True, db_column='NextMeetingDate', null=True)),
                ('metpicker', models.TextField(blank=True, db_column='MetPicker', null=True)),
                ('proceedable', models.TextField(blank=True, db_column='Proceedable', null=True)),
                ('reasonunproceedable', models.TextField(blank=True, db_column='ReasonUnproceedable', null=True)),
            ],
            options={
                'db_table': 'MeetingData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Memberdata',
            fields=[
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('membergroup', models.TextField(blank=True, db_column='MemberGroup', null=True)),
                ('region', models.TextField(blank=True, db_column='Region', null=True)),
                ('group_imwy', models.TextField(blank=True, db_column='Group_IMWY', null=True)),
                ('condition', models.TextField(blank=True, db_column='Condition', null=True)),
                ('internal_position', models.TextField(blank=True, db_column='Internal_Position', null=True)),
                ('internal_title', models.TextField(blank=True, db_column='Internal_Title', null=True)),
                ('department', models.TextField(blank=True, db_column='Department', null=True)),
                ('department_category', models.TextField(blank=True, db_column='Department_Category', null=True)),
                ('department_title', models.TextField(blank=True, db_column='Department_Title', null=True)),
                ('tgw', models.BooleanField(blank=True, db_column='TGW', null=True)),
                ('male', models.BooleanField(blank=True, db_column='Male', null=True)),
                ('registered', models.BooleanField(blank=True, db_column='Registered', null=True)),
                ('bbt', models.BooleanField(blank=True, db_column='BBT', null=True)),
                ('btm', models.TextField(blank=True, db_column='BTM', null=True)),
                ('first_name', models.TextField(blank=True, db_column='FIRST_NAME', null=True)),
                ('middle_name', models.TextField(blank=True, db_column='MIDDLE_NAME', null=True)),
                ('last_name', models.TextField(blank=True, db_column='LAST_NAME', null=True)),
                ('preferred_name', models.TextField(blank=True, db_column='PREFERRED_NAME', null=True)),
                ('preferred_name_2', models.TextField(blank=True, db_column='PREFERRED_NAME_2', null=True)),
                ('k_name', models.TextField(blank=True, db_column='K_NAME', null=True)),
                ('ct', models.TextField(blank=True, db_column='CT', null=True)),
                ('inner_dept', models.TextField(blank=True, db_column='Inner_Dept', null=True)),
                ('username', models.TextField(blank=True, db_column='UserName', null=True)),
                ('password', models.TextField(blank=True, db_column='PassWord', null=True)),
                ('visa', models.TextField(blank=True, db_column='Visa', null=True)),
                ('dob', models.TextField(blank=True, db_column='DoB', null=True)),
                ('scjid', models.TextField(blank=True, db_column='SCJID', null=True)),
                ('gender', models.TextField(blank=True, db_column='Gender', null=True)),
                ('memberaddress', models.TextField(blank=True, db_column='MemberAddress', null=True)),
                ('housemates', models.TextField(blank=True, db_column='Housemates', null=True)),
                ('workhours', models.TextField(blank=True, db_column='WorkHours', null=True)),
                ('studyhours', models.TextField(blank=True, db_column='StudyHours', null=True)),
                ('expgrad', models.TextField(blank=True, db_column='ExpGrad', null=True)),
                ('languages', models.TextField(blank=True, db_column='Languages', null=True)),
                ('hobbies', models.TextField(blank=True, db_column='Hobbies', null=True)),
                ('formfilled', models.TextField(blank=True, db_column='FormFilled', null=True)),
                ('phone', models.TextField(blank=True, db_column='Phone', null=True)),
                ('socialuser', models.TextField(blank=True, db_column='SocialUser', null=True)),
                ('unitno', models.TextField(blank=True, db_column='UnitNo', null=True)),
                ('streetno', models.TextField(blank=True, db_column='StreetNo', null=True)),
                ('streetname', models.TextField(blank=True, db_column='StreetName', null=True)),
                ('surburb', models.TextField(blank=True, db_column='Surburb', null=True)),
                ('state', models.TextField(blank=True, db_column='State', null=True)),
                ('postcode', models.TextField(blank=True, db_column='PostCode', null=True)),
                ('last_login', models.TextField(blank=True, db_column='Last_Login', null=True)),
                ('is_authenticated', models.BooleanField(blank=True, db_column='Is_Authenticated', null=True)),
            ],
            options={
                'db_table': 'MemberData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Regiondata',
            fields=[
                ('rid', models.AutoField(db_column='RID', primary_key=True, serialize=False)),
                ('region', models.CharField(db_column='Region', max_length=255)),
                ('position', models.IntegerField(blank=True, db_column='Position', null=True)),
            ],
            options={
                'db_table': 'RegionData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('reportid', models.AutoField(db_column='ReportId', primary_key=True, serialize=False)),
                ('reportdate', models.CharField(blank=True, db_column='ReportDate', max_length=1200, null=True)),
                ('classdate', models.CharField(blank=True, db_column='ClassDate', max_length=1200, null=True)),
                ('fruitkey', models.IntegerField(db_column='FruitKey')),
                ('createdby', models.IntegerField(db_column='CreatedBy')),
                ('topic', models.CharField(blank=True, db_column='Topic', max_length=1200, null=True)),
                ('beforeclass', models.CharField(blank=True, db_column='BeforeClass', max_length=1200, null=True)),
                ('duringclass', models.CharField(blank=True, db_column='DuringClass', max_length=1200, null=True)),
                ('afterclass', models.CharField(blank=True, db_column='AfterClass', max_length=1200, null=True)),
                ('general', models.CharField(blank=True, db_column='General', max_length=1200, null=True)),
                ('obedience', models.CharField(blank=True, db_column='Obedience', max_length=1200, null=True)),
                ('friendcircumstances', models.CharField(blank=True, db_column='FriendCircumstances', max_length=1200, null=True)),
                ('nextclassdate', models.DateTimeField(blank=True, db_column='NextClassDate', null=True)),
                ('attendee_1', models.TextField(blank=True, db_column='Attendee_1', null=True)),
                ('attendee_2', models.TextField(blank=True, db_column='Attendee_2', null=True)),
                ('additionalinfo', models.TextField(blank=True, db_column='AdditionalInfo', null=True)),
                ('reaction', models.TextField(blank=True, db_column='Reaction', null=True)),
                ('attitude', models.TextField(blank=True, db_column='Attitude', null=True)),
                ('environment', models.TextField(blank=True, db_column='Environment', null=True)),
                ('bbt_feedback', models.TextField(blank=True, db_column='BBT_Feedback', null=True)),
                ('label', models.TextField(blank=True, db_column='Label', null=True)),
            ],
            options={
                'db_table': 'Report',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Serviceabsentdata',
            fields=[
                ('aid', models.AutoField(db_column='AID', primary_key=True, serialize=False)),
                ('memberid', models.IntegerField(blank=True, db_column='MemberID', null=True)),
                ('absentcounter', models.IntegerField(blank=True, db_column='AbsentCounter', null=True)),
                ('absentcumulative', models.IntegerField(blank=True, db_column='AbsentCumulative', null=True)),
                ('lastreport', models.CharField(blank=True, db_column='LastReport', max_length=255, null=True)),
            ],
            options={
                'db_table': 'ServiceAbsentData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Servicedata',
            fields=[
                ('sid', models.AutoField(db_column='SID', primary_key=True, serialize=False)),
                ('servicedate', models.DateField(blank=True, db_column='ServiceDate', null=True)),
                ('serviceday', models.CharField(blank=True, db_column='ServiceDay', max_length=50, null=True)),
                ('servicetitle', models.TextField(blank=True, db_column='ServiceTitle', null=True)),
                ('maintime', models.CharField(blank=True, db_column='MainTime', max_length=50, null=True)),
            ],
            options={
                'db_table': 'ServiceData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sessions',
            fields=[
                ('sid', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('session', models.TextField()),
                ('expires', models.DateTimeField()),
            ],
            options={
                'db_table': 'sessions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stagefdata',
            fields=[
                ('fruitkey', models.IntegerField(db_column='FruitKey', primary_key=True, serialize=False)),
                ('f_time', models.DateTimeField(db_column='F_TIME')),
                ('member1', models.IntegerField(blank=True, db_column='Member1', null=True)),
                ('member2', models.IntegerField(blank=True, db_column='Member2', null=True)),
                ('f1_point', models.FloatField(blank=True, db_column='F1_Point', null=True)),
                ('f2_point', models.FloatField(blank=True, db_column='F2_Point', null=True)),
            ],
            options={
                'db_table': 'StageFData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stagemdata',
            fields=[
                ('fruitkey', models.IntegerField(db_column='FruitKey', primary_key=True, serialize=False)),
                ('m_time', models.DateTimeField(db_column='M_TIME')),
                ('member1', models.IntegerField(blank=True, db_column='Member1', null=True)),
                ('member2', models.IntegerField(blank=True, db_column='Member2', null=True)),
                ('m1_point', models.FloatField(blank=True, db_column='M1_Point', null=True)),
                ('m2_point', models.FloatField(blank=True, db_column='M2_Point', null=True)),
            ],
            options={
                'db_table': 'StageMData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stagepdata',
            fields=[
                ('fruitkey', models.IntegerField(db_column='FruitKey', primary_key=True, serialize=False)),
                ('p_time', models.DateTimeField(db_column='P_TIME')),
                ('member1', models.IntegerField(blank=True, db_column='Member1', null=True)),
                ('member2', models.IntegerField(blank=True, db_column='Member2', null=True)),
                ('p1_point', models.FloatField(blank=True, db_column='P1_Point', null=True)),
                ('p2_point', models.FloatField(blank=True, db_column='P2_Point', null=True)),
            ],
            options={
                'db_table': 'StagePData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stageppdata',
            fields=[
                ('fruitkey', models.IntegerField(db_column='FruitKey', primary_key=True, serialize=False)),
                ('pp_time', models.DateTimeField(db_column='PP_TIME')),
                ('member1', models.IntegerField(blank=True, db_column='Member1', null=True)),
                ('member2', models.IntegerField(blank=True, db_column='Member2', null=True)),
                ('pp1_point', models.FloatField(blank=True, db_column='PP1_Point', null=True)),
                ('pp2_point', models.FloatField(blank=True, db_column='PP2_Point', null=True)),
            ],
            options={
                'db_table': 'StagePPData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Todo',
            fields=[
                ('taskid', models.AutoField(db_column='TaskID', primary_key=True, serialize=False)),
                ('memberid', models.IntegerField(blank=True, db_column='MemberId', null=True)),
                ('createddate', models.DateTimeField(blank=True, db_column='CreatedDate', null=True)),
                ('completedate', models.DateTimeField(blank=True, db_column='CompleteDate', null=True)),
                ('tasktitle', models.CharField(blank=True, db_column='TaskTitle', max_length=255, null=True)),
                ('taskdescription', models.CharField(blank=True, db_column='TaskDescription', max_length=255, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=255, null=True)),
                ('iscompleted', models.TextField(blank=True, db_column='IsCompleted', null=True)),
                ('participants', models.CharField(blank=True, db_column='Participants', max_length=255, null=True)),
            ],
            options={
                'db_table': 'Todo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Watchlistdata',
            fields=[
                ('watchid', models.AutoField(db_column='WatchID', primary_key=True, serialize=False)),
                ('memberid', models.IntegerField(blank=True, db_column='MemberID', null=True)),
                ('addeddate', models.DateField(blank=True, db_column='AddedDate', null=True)),
                ('addedby', models.IntegerField(blank=True, db_column='AddedBy', null=True)),
                ('unwatched', models.BooleanField(blank=True, db_column='Unwatched', null=True)),
            ],
            options={
                'db_table': 'WatchListData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Whitelistdata',
            fields=[
                ('wid', models.AutoField(db_column='WID', primary_key=True, serialize=False)),
                ('title', models.TextField(db_column='Title')),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('data', models.TextField(blank=True, db_column='Data', null=True)),
            ],
            options={
                'db_table': 'WhiteListData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Whitelistrecdata',
            fields=[
                ('wid', models.AutoField(db_column='WID', primary_key=True, serialize=False)),
                ('memberid', models.IntegerField(db_column='MemberID')),
                ('wlid', models.IntegerField(db_column='WLID')),
                ('addeddate', models.TextField(blank=True, db_column='AddedDate', null=True)),
                ('addedby', models.IntegerField(blank=True, db_column='AddedBy', null=True)),
            ],
            options={
                'db_table': 'WhiteListRecData',
                'managed': False,
            },
        ),
    ]
